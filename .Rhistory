test_df <- read_csv("~/Oskar/energy-prices-forecasting/test_df.csv")
x_cols=c('deman','supply','wind_prod','reserve','weekend')
rdn_ts=ts(train_df$lag_rdn_24, frequency=24)
cro_ts=ts(train_df$lag_cro_72, frequency=24)
model1=arimax(log(rdn_ts+1),order=c(1,1,0),seasonal=c(1,0,0),xreg=train_df[x_cols])
train_df <- read_csv("~/Oskar/energy-prices-forecasting/train_df.csv")
test_df <- read_csv("~/Oskar/energy-prices-forecasting/test_df.csv")
x_cols=c('deman','supply','wind_prod','reserve','weekend')
rdn_ts=ts(train_df$lag_rdn_24, frequency=24)
cro_ts=ts(train_df$lag_cro_72, frequency=24)
model1=arimax(log(rdn_ts+1),order=c(1,1,0),seasonal=c(1,0,0),xreg=train_df[x_cols])
model2=arimax(log(cro_ts+1),order=c(1,1,0),seasonal=c(1,0,0),xreg=train_df[x_cols])
arima_rdn=as.vector(exp(stats::predict(model1,newx=train_df[x_cols]))$pred)-1)
arima_rdn=as.vector(exp(stats::predict(model1,newx=train_df[x_cols])$pred)-1)
arima_cro=as.vector(exp(stats::predict(model2,newx=train_df[x_cols])$pred)-1)
arima_rdn
arima_cro
model1=arimax(log(rdn_ts+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
model2=arimax(log(cro_ts+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
arima_rdn=as.vector(exp(stats::predict(model1,newx=train_df[x_cols])$pred)-1)
arima_cro=as.vector(exp(stats::predict(model2,newx=train_df[x_cols])$pred)-1)
arima_rdn
arima_cro
model01=auto.arima(rdn_ts)
model01
model01.predict(rdn_ts)
auto.arima(cro_ts)
model01=auto.arima(rdn_ts)
model02=auto.arima(cro_ts)
x_train2=cbind(x_train,arima_rdn,arima_cro)
x_train2=cbind(train_df,arima_rdn,arima_cro)
write_csv(x_train2,'~/Oskar/energy-prices-forecasting/train_df.csv')
rdn_ts
iters=nrow(x3)/24
iters=nrow(test_df)/24
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df[rdn]
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=x3[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
}
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
}
train_df <- read_csv("~/Oskar/energy-prices-forecasting/train_df.csv")
test_df <- read_csv("~/Oskar/energy-prices-forecasting/test_df.csv")
x_cols=c('deman','supply','wind_prod','reserve','weekend')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
write_csv(x_test2,'~/Oskar/energy-prices-forecasting/test_df.csv')
x_test2=cbind(test_df,arima_rdn,arima_cro)
arima_rdn=pred_rdn
arima_cro=pred_cro
x_test2=cbind(test_df,arima_rdn,arima_cro)
train_df <- read_csv("~/Oskar/energy-prices-forecasting/train_df.csv")
test_df <- read_csv("~/Oskar/energy-prices-forecasting/test_df.csv")
x_cols=c('deman','supply','wind_prod','reserve','weekend')
rdn_ts=ts(train_df$lag_rdn_24, frequency=24)
cro_ts=ts(train_df$lag_cro_72, frequency=24)
model1=arimax(log(rdn_ts+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
model2=arimax(log(cro_ts+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
arima_rdn=as.vector(exp(stats::predict(model1,newx=train_df[x_cols])$pred)-1)
arima_cro=as.vector(exp(stats::predict(model2,newx=train_df[x_cols])$pred)-1)
x_train2=cbind(train_df,arima_rdn,arima_cro)
write_csv(x_train2,'~/Oskar/energy-prices-forecasting/train_df.csv')
iters=nrow(test_df)/24
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
}
arima_rdn=pred_rdn
arima_cro=pred_cro
x_test2=cbind(test_df,arima_rdn,arima_cro)
write_csv(x_test2,'~/Oskar/energy-prices-forecasting/test_df.csv')
dim(test_df)
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
x_test2=cbind(test_df,arima_rdn,arima_cro)
write_csv(x_test2,'~/Oskar/energy-prices-forecasting/test_df.csv')
dim(test_df)
length(arim_rnd)
length(arim_rdn)
arima_rdn=pred_rdn
arima_cro=pred_cro
arima_rdn
length(arima_rdn)
dim(test_df)
iters
nrow(test_df)/24
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
iteres
iters
dim(test_df)
nrow(test_df)
344/24
library(readr)
library(forecast)
library(TSA)
library(stringr)
library(quantmod)
library(dplyr)
df <- read_csv("~/Oskar/energy-prices-forecasting/new_df.csv")
week_ma=df[c('ma_rdn_168','ma_cro_168')]
z=scale(week_ma)
km1=kmeans(z,3)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
max(df$day)
min(df$day)
df2=subset(df, day>-1)
train_split=round((max(df2$day)-min(df2$day))*0.7)+min(df2$day)
train_df=subset(df2, day>10)
test_df=df2[481:nrow(df),]
dim(train_df)
dim(test_df)
test_df
test_df$rdn
test_df$cro
dim(test_df)
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
write_csv(x_train2,'~/Oskar/energy-prices-forecasting/train_df.csv')
iters=nrow(test_df)/24
library(readr)
library(forecast)
library(TSA)
library(stringr)
library(quantmod)
library(dplyr)
df <- read_csv("~/Oskar/energy-prices-forecasting/new_df.csv")
week_ma=df[c('ma_rdn_168','ma_cro_168')]
z=scale(week_ma)
km1=kmeans(z,3)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
max(df$day)
min(df$day)
df2=subset(df, day>-1)
train_split=round((max(df2$day)-min(df2$day))*0.7)+min(df2$day)
train_df=subset(df2, day>10)
test_df=df2[481:nrow(df),]
dim(train_df)
dim(test_df)
x_cols=c('demand','supply1','supply2','wind','reserve')
rdn_ts=ts(train_df$lag_rdn_24, frequency=24)
cro_ts=ts(train_df$lag_cro_72, frequency=24)
model1=arimax(log(rdn_ts+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
model2=arimax(log(cro_ts+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
arima_rdn=as.vector(exp(stats::predict(model1,newx=train_df[x_cols])$pred)-1)
arima_cro=as.vector(exp(stats::predict(model2,newx=train_df[x_cols])$pred)-1)
x_train2=cbind(train_df,arima_rdn,arima_cro)
write_csv(x_train2,'~/Oskar/energy-prices-forecasting/train_df.csv')
iters=nrow(test_df)/24
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_ts)
Sys.sleep(2)
}
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_t2)
Sys.sleep(2)
}
arima_rdn=pred_rdn
arima_cro=pred_cro
arima_rdn
arima_cro
y1
y2
write_csv(x_train2,'~/Oskar/energy-prices-forecasting/train_df.csv')
iters=nrow(test_df)/24
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_t2)
Sys.sleep(2)
}
arima_rdn=pred_rdn
arima_cro=pred_cro
x_test2=cbind(test_df,arima_rdn,arima_cro)
write_csv(x_test2,'~/Oskar/energy-prices-forecasting/test_df.csv')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
y2
y1
y2
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
auto.arima(rdn_ts)
auto.arima(cro_ts)
iters=nrow(test_df)/24
pred_rdn=c()
pred_cro=c()
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
arima_rdn=pred_rdn
arima_cro=pred_cro
x_test2=cbind(test_df,arima_rdn,arima_cro)
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
df <- read_csv("~/Oskar/energy-prices-forecasting/new_df.csv")
week_ma=df[c('ma_rdn_168','ma_cro_168')]
z=scale(week_ma)
km1=kmeans(z,3)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
max(df$day)
min(df$day)
df2=subset(df, day>-1)
train_split=round((max(df2$day)-min(df2$day))*0.7)+min(df2$day)
train_df=subset(df2, day>10)
test_df=df2[481:nrow(df),]
dim(train_df)
dim(test_df)
train_split=round((max(df2$day)-min(df2$day))*0.7)+min(df2$day)
train_df=subset(df2, day<train_split)
dim(train_df)
test_df=subset(df2, day>=train_split)
dim(train_df)
dim(test_df)
408/24
192/24
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
df <- read_csv("~/Oskar/energy-prices-forecasting/new_df.csv")
week_ma=df[c('ma_rdn_168','ma_cro_168')]
z=scale(week_ma)
km1=kmeans(z,3)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
km1=kmeans(z,4)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
max(df$day)
min(df$day)
df2=subset(df, day>-1)
train_split=round((max(df2$day)-min(df2$day))*0.7)+min(df2$day)
train_df=subset(df2, day<train_split)
test_df=subset(df2, day>=train_split)
dim(train_df)
dim(test_df)
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
library(readr)
library(forecast)
library(TSA)
library(stringr)
library(quantmod)
library(dplyr)
df <- read_csv("~/Oskar/energy-prices-forecasting/new_df.csv")
week_ma=df[c('ma_rdn_168','ma_cro_168')]
z=scale(week_ma)
km1=kmeans(z,4)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
km1=kmeans(z,3)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
max(df$day)
km1=kmeans(z,2)
kol1=km1$cluster+1
grouped_feat=group_by(as.data.frame(cbind(df$ma_cro_168,df$ma_rdn_168,kol1)),kol1)
summarise(grouped_feat,mean(V1),mean(V2))
plot(df$ma_cro_168,col=kol1)
plot(df$ma_rdn_168,col=kol1)
max(df$day)
min(df$day)
df2=subset(df, day>-1)
train_split=round((max(df2$day)-min(df2$day))*0.7)+min(df2$day)
train_df=subset(df2, day<train_split)
test_df=subset(df2, day>=train_split)
dim(train_df)
dim(test_df)
x_cols=c('demand','supply1','supply2','wind','reserve')
rdn_ts=ts(train_df$lag_rdn_24, frequency=24)
cro_ts=ts(train_df$lag_cro_72, frequency=24)
model1=arimax(log(rdn_ts+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
model2=arimax(log(cro_ts+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=train_df[x_cols])
arima_rdn=as.vector(exp(stats::predict(model1,newx=train_df[x_cols])$pred)-1)
arima_cro=as.vector(exp(stats::predict(model2,newx=train_df[x_cols])$pred)-1)
x_train2=cbind(train_df,arima_rdn,arima_cro)
write_csv(x_train2,'~/Oskar/energy-prices-forecasting/train_df.csv')
iters=nrow(test_df)/24
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(2,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_t2)
Sys.sleep(2)
}
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_t2)
Sys.sleep(2)
}
arima_rdn=pred_rdn
arima_cro=pred_cro
x_test2=cbind(test_df,arima_rdn,arima_cro)
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(1,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_t2)
Sys.sleep(2)
}
source('~/Oskar/energy-prices-forecasting/feature_processing_and_arima.R')
test_df
pred_rdn=c()
pred_cro=c()
x=train_df[x_cols]
xt=test_df[x_cols]
y1=rdn_ts
y2=cro_ts
y_test1=test_df$rdn
y_test2=test_df$cro
for (i in 1:iters){
model1=arimax(log(y1+1),order=c(0,1,1),seasonal=c(1,0,0),xreg=x)
model2=arimax(log(y2+1),order=c(0,1,1),seasonal=c(1,0,0),xreg=x)
# forecasts
x_i=xt[(1+24*(i-1)):(24*i),]
pred_t1=as.vector(exp(stats::predict(model1,newx=x_i)$pred)-1)
pred_t2=as.vector(exp(stats::predict(model2,newx=x_i)$pred)-1)
pred_rdn=c(pred_rdn,pred_t1)
pred_cro=c(pred_cro,pred_t2)
x=rbind(x,x_i)
y1=ts(c(as.vector(y1),y_test1[(1+24*(i-1)):(24*i)]),frequency=24)
y2=ts(c(as.vector(y2),y_test2[(1+24*(i-1)):(24*i)]),frequency=24)
print(pred_t1)
Sys.sleep(1)
print(pred_t2)
Sys.sleep(2)
}
arima_rdn=pred_rdn
arima_cro=pred_cro
x_test2=cbind(test_df,arima_rdn,arima_cro)
write_csv(x_test2,'~/Oskar/energy-prices-forecasting/test_df.csv')
